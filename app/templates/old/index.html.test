<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
	<link rel="stylesheet" href="{{ url_for('static', filename='node_modules/bootstrap/dist/css/bootstrap.min.css')}}" />
        <script type="text/javascript" language="javascript" src="{{ url_for('static', filename='jsme/jsme.nocache.js')}}"></script>
	<!--<script type="text/js" src="{{ url_for('static', filename='node_modules/react/dist/react.min.js')}}"></script>-->
	<!--<script type="text/js" src="{{ url_for('static', filename='node_modules/react-dom/dist/react-dom.min.js')}}"></script>-->
	<script src="https://cdnjs.cloudflare.com/ajax/libs/babel-standalone/6.25.0/babel.js"></script>
	<script>
	function jsmeOnLoad() {
            jsmeApplet = new JSApplet.JSME("appletContainer", "380px", "340px");
        }
        </script>
        {% if title %}
        <title> {{ title }} - Molecule Shopping Cart</title>
        {% else %}
        <title>Welcome to Molecule Shopping Cart!</title>
        {% endif %}
    <script>
    	//Alternative method: the size is not specified: the applet will use 100% of the space of its parent container "appletContainer".
    	//Be sure that the parent container size > 0, otherwise the applet will not be visible

/*    	jsmeApplet = new JSApplet.JSME("appletContainer",  {
     		//optional parameters
    		"options" : "query,hydrogens",
    		"jme" : startingStructure
    	});

        //jsmeApplet.deferredRepaint(); //the applet will be repainted after the browser event loop returns
        //it is recommended to use it if the JSME is created outside this jsmeOnLoad() function


        //jsmeApplet has the same API as the original Java applet
    	//One can mimic the JME Java applet access to simplify the adaptation of HTML and JavaScript code:
    	document.JME = jsmeApplet;


        //suggestion
    	//all buttons that access the jsme variable were disabled in the html
    	//Now enable all buttons that can access the jsme variable since the applet is ready
    	//example:
    	//document.getElementById("button").disabled=false;


		document.getElementById("inchiKeyUrlTextArea").value = jsmeApplet.getWebSearchInchiKeyBaseUrl();

    }
*/

    document.JME = jsmeApplet;
    function readMolecule() {
    	  var jme = "16 17 C 7.37 -8.99 C 7.37 -7.59 C 6.16 -6.89 C 4.95 -7.59 C 4.95 -8.99 C 6.16 -9.69 N 8.58 -6.89 C 8.58 -5.49 C 7.37 -4.79 O 6.16 -5.49 C 9.80 -7.59 O 9.80 -8.99 C 11.01 -6.89 Cl 12.22 -7.59 Cl 11.01 -5.49 C 9.80 -4.79 1 2 1 2 3 2 3 4 1 4 5 2 5 6 1 6 1 2 7 8 1 8 9 1 9 10 1 3 10 1 2 7 1 7 11 1 11 12 2 11 13 1 13 14 1 13 15 1 8 16 1";
    	  jsmeApplet.readMolecule(jme); // or document.JME.readMolecule(jme);
    	}

    	function readMultipart() {
    	  var jme = "9 9 C 6.68 -7.15 C 5.47 -6.45 C 4.26 -7.15 C 4.26 -8.55 C 5.47 -9.25 C 6.68 -8.55 C 5.47 -5.05 O- 6.68 -4.35 O 4.26 -4.35 1 2 1 2 3 2 3 4 1 4 5 2 5 6 1 6 1 2 2 7 1 7 8 1 7 9 2|1 0 Na+ 12.21 -6.61";
    	  jsmeApplet.readMolecule(jme) // or document.JME.readMolecule(jme
    	}

    	function readReaction() {
    	  var jme = "3 2 C:1 1.41 -7.12 O:2 1.41 -5.72 Cl 2.63 -7.82 1 2 2 1 3 1|3 2 N:3 5.72 -6.78 C:4 7.12 -6.78 H:5 5.02 -7.99 1 2 1 1 3 1 >> 5 4 C:1 13.51 -6.40 O:2 13.51 -5.00 N:3 14.72 -7.10 C:4 15.94 -6.40 H:5 14.71 -8.50 1 2 2 1 3 1 3 4 1 3 5 1";
    	  jsmeApplet.readMolecule(jme);
    	}


        function getMolfile(isV3000) {
        	var data = document.JME.molFile(isV3000);
        	document.getElementById("jme_output").value = data;

        }
        function getSmiles() {
        	var data = document.JME.smiles();
        	document.getElementById("jme_output").value = data;
       }
        function getJMEstring() {
        	var data = document.JME.jmeFile();
        	document.getElementById("jme_output").value = data;
        }
     function readMoleculeFromTextArea() {
    	  var jme = document.getElementById("jme_output").value;
    	  jsmeApplet.readMolecule(jme);
    	}
     function readMOLFromTextArea() {
    	  var mol = document.getElementById("jme_output").value;
    	  jsmeApplet.readMolFile(mol);
    	}

      function readAnyFromTextArea() {
    	  var mol = document.getElementById("jme_output").value;
    	  jsmeApplet.readGenericMolecularInput(mol);
    	}

    </script>
    </head>
    <body>
	<script type="text/javascript" src="{{ url_for('static', filename='node_modules/jquery/dist/jquery.slim.min.js')}}"></script>
	<script type="text/javascript" src="{{ url_for('static', filename='node_modules/tether/dist/js/tether.min.js')}}"></script>
	<script type="text/javascript" src="{{ url_for('static', filename='node_modules/bootstrap/dist/js/bootstrap.min.js')}}"></script>
	<!--<script type="text/javascript" src="{{ url_for('static', filename='node_modules/react/dist/react.min.js')}}"></script>-->
	<!--<script type="text/javascript" src="{{ url_for('static', filename='node_modules/react-dom/dist/react-dom.min.js')}}"></script>-->
        <script src="https://cdnjs.cloudflare.com/ajax/libs/babel-standalone/6.25.0/babel.js"></script>
	<script crossorigin src="https://unpkg.com/react@16/umd/react.production.min.js"></script>
        <script crossorigin src="https://unpkg.com/react-dom@16/umd/react-dom.production.min.js"></script>
        <div class="jumbotron jumbotron-fluid">
           <div class="container">
               <h1 class="display-4">Molecule Shopping Cart</h1>
                   <p class="lead">Draw a molecule and search for analogs using SmallWorld.</p>
           </div>
        </div>
	<!--
        <div id="jumbotronExample"></div>
        <div id="jumbotronExample"></div>
        <script type="text/babel">
        var jumbotronHTML =
        <div className="container">
        <div className="jumbotron bg-info">
	<h1 className="display-3">Hello, {{user.username}}</h1>
        <p className="lead">This is a simple hero unit, a simple jumbotron-style component for calling extra attention to featured content or information.</p>
        <hr className="my-4" />
        <p>It uses utility classes for typography and spacing to space content out within the larger container.</p>
        <p className="lead">
        <a className="btn btn-primary btn-lg" href="#" role="button">Learn more</a>
        </p>
        </div>
        </div>
        ReactDOM.render( jumbotronHTML, document.getElementById('jumbotronExample') );
        </script>
	-->
	<div id="appletContainer"></div>
	<div id="like_button_container"></div>
	<script src="{{ url_for('static', filename='like_button.js') }}"></script>
      <table align="center">
          <tr>
            <td colspan="3" style="font-weight:bold;">Export chemical structure from applet:</td>
          </tr>
          <tr>
            <td>
             <button type="button" onclick='getMolfile(false);'>Get molfile</button>
            </td>
            <td>
             <button type="button" onclick='getMolfile(true);'>Get molfile V3000</button>
            </td>
            <td>
             <button type="button" onclick='getSmiles();'>Get smiles</button>
            </td>
            <td>
             <button type="button" onclick='getJMEstring();'>Get JME string</button>
            </td>
          </tr>
          <tr>
            <td colspan="3">
            <TEXTAREA id="jme_output" ROWS=20 COLS=80></TEXTAREA>
            </td>
          </tr>
      </table>

    </body>
</html>
